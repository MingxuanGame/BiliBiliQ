"""
Generated by generator/gen_pydantic.py. DO NOT EDIT!
isort:skip_file
"""
import builtins
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
from enum import Enum
from datetime import datetime


class PrivacyConfigState(str, Enum):
    """隐私开关状态"""

    close = 'close'
    """关闭"""
    open = 'open'
    """打开"""


class PrivacyConfigType(str, Enum):
    """隐私开关类型"""

    none = 'none'
    """"""
    dynamic_city = 'dynamic_city'
    """动态同城"""


class NoArgRequest(BaseModel):
    """空请求"""


class NoReply(BaseModel):
    """空响应"""


class PrivacyConfigItem(BaseModel):
    """隐私设置"""

    privacy_config_type: PrivacyConfigType
    """隐私开关类型"""
    title: builtins.str
    """"""
    state: PrivacyConfigState
    """隐私开关状态"""
    sub_title: builtins.str
    """"""
    sub_title_uri: builtins.str
    """"""


class PrivacyConfigReply(BaseModel):
    """获取隐私设置-响应"""

    privacy_config_item: Optional["PrivacyConfigItem"] = None
    """隐私设置"""


class SetPrivacyConfigRequest(BaseModel):
    """修改隐私设置-请求"""

    privacy_config_type: PrivacyConfigType
    """隐私开关类型"""
    state: PrivacyConfigState
    """隐私开关状态"""


PrivacyConfigItem.update_forward_refs()
SetPrivacyConfigRequest.update_forward_refs()
PrivacyConfigReply.update_forward_refs()
NoArgRequest.update_forward_refs()
NoReply.update_forward_refs()
