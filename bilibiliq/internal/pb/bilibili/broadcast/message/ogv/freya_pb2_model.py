"""
Generated by generator/gen_pydantic.py. DO NOT EDIT!
isort:skip_file
"""
import builtins
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
from enum import Enum
from datetime import datetime


class PlayStatus(str, Enum):
    """播放状态"""

    Pause = 'Pause'
    """暂停"""
    Play = 'Play'
    """播放"""
    End = 'End'
    """终止"""


class RoomType(str, Enum):
    """房间类型"""

    Private = 'Private'
    """私密"""
    Open = 'Open'
    """公开"""


class MessageDomain(str, Enum):
    """信息通知发送领域"""

    DefaultDomain = 'DefaultDomain'
    """默认"""
    RoomMid = 'RoomMid'
    """房间用户"""
    SystemInfo = 'SystemInfo'
    """系统通知"""


class MessageType(str, Enum):
    """通知信息类型"""

    DefaultType = 'DefaultType'
    """默认"""
    ChatMessage = 'ChatMessage'
    """房间用户"""
    SystemMessage = 'SystemMessage'
    """系统通知"""


class TriggerType(str, Enum):
    """触发通知类型"""

    DefaultTrigger = 'DefaultTrigger'
    """默认"""
    Relation = 'Relation'
    """关注、取消关注"""


class RoomMemberChangeEvent(BaseModel):
    """房间人员变更事件"""

    room_id: builtins.int
    """房间id"""
    owner_id: builtins.int
    """房主id"""
    members: "List[UserInfoProto]"
    """房间成员列表"""
    message: Optional["MessageProto"] = None
    """提示信息"""


class ProgressSyncEvent(BaseModel):
    """播放进度同步事件"""

    room_id: builtins.int
    """房间id"""
    season_id: builtins.int
    """播放中的season_id"""
    episode_id: builtins.int
    """播放中的episode_id"""
    status: PlayStatus
    """播放状态"""
    progress: builtins.int
    """房主播放进度"""
    message: Optional["MessageProto"] = None
    """提示信息"""


class RoomUpdateEvent(BaseModel):
    """房间状态更新"""

    room_id: builtins.int
    """房间id"""
    type: RoomType
    """房间变更状态"""
    message: Optional["MessageProto"] = None
    """提示信息"""


class RoomDestroyEvent(BaseModel):
    """房间销毁通知"""

    room_id: builtins.int
    """房间id"""
    message: Optional["MessageProto"] = None
    """提示信息"""


class RoomTriggerEvent(BaseModel):
    """房间触发通知"""

    mid: builtins.int
    """操作人"""
    message: Optional["MessageProto"] = None
    """提示信息"""
    trigger: TriggerType
    """触发类型"""


class UserInfoProto(BaseModel):
    """用户信息"""

    mid: builtins.int
    """用户id"""
    face: builtins.str
    """用户头像url"""
    nickname: builtins.str
    """昵称"""
    level: builtins.int
    """等级"""
    sign: builtins.str
    """签名"""
    vip: Optional["VipProto"] = None
    """大会员信息"""
    official: Optional["OfficialProto"] = None
    """身份认证信息"""
    pendant: Optional["PendantProto"] = None
    """挂件信息"""
    buvid: builtins.str
    """设备buvid"""


class MessageProto(BaseModel):
    """通知信息"""

    content: builtins.str
    """可带占位符匹配的消息体 ep "还没有其他小伙伴，[去邀请>]<https://big.bilibili.com/mobile/giftIndex?mid=123>" """
    content_type: builtins.int
    """消息体类型
    0:json格式的文本消息 1:支持全文本可点(破冰)
    """


class VipProto(BaseModel):
    """大会员信息"""

    type: builtins.int
    status: builtins.int
    due_date: builtins.int
    vip_pay_type: builtins.int
    theme_type: builtins.int
    avatar_subscript: builtins.int
    """大会员角标
    0:无角标 1:粉色大会员角标 2:绿色小会员角标
    """
    nickname_color: builtins.str
    """昵称色值，可能为空，色值示例：#FFFB9E60"""


class OfficialProto(BaseModel):
    """认证信息"""

    role: builtins.int
    title: builtins.str
    desc: builtins.str
    type: builtins.int


class PendantProto(BaseModel):
    """挂件信息"""

    pid: builtins.int
    name: builtins.str
    image: builtins.str
    expire: builtins.int
    image_enhance: builtins.str


class MessageEvent(BaseModel):
    """通用信息通知"""

    room_id: builtins.int
    """房间id"""
    msg_id: builtins.int
    """消息id"""
    ts: builtins.int
    """消息发送服务端时间 时间戳 单位秒"""
    oid: builtins.int
    """信息通知发送主体id"""
    domain: MessageDomain
    """信息通知发送领域"""
    type: MessageType
    """通知信息类型"""
    message: Optional["MessageProto"] = None
    """提示信息"""
    user: Optional["UserInfoProto"] = None
    """消息发送用户信息"""
    msg_id2: builtins.str
    """消息id str类型"""


class RemoveChatEvent(BaseModel):
    """聊天信息清除通知"""

    room_id: builtins.int
    """房间id"""
    msg_id: builtins.int
    """撤回的聊天信息id"""
    message: Optional["MessageProto"] = None
    """提示信息"""


class FreyaEventBody(BaseModel):
    """ "一起看"房间事件"""

    room_id: builtins.int
    """房间id"""
    white_mid: List[builtins.int]
    """接收事件消息的白名单用户"""
    ignore_mid: List[builtins.int]
    """不处理信息的黑名单用户 优先级低于白名单 当白名单有数据时 忽略黑名单"""
    member_change: Optional["RoomMemberChangeEvent"] = None
    """房间人员变更事件"""
    progress: Optional["ProgressSyncEvent"] = None
    """播放进度同步事件"""
    room_update: Optional["RoomUpdateEvent"] = None
    """房间状态更新"""
    message: Optional["MessageEvent"] = None
    """通用信息通知"""
    remove_chat: Optional["RemoveChatEvent"] = None
    """聊天信息清除通知"""
    room_destroy: Optional["RoomDestroyEvent"] = None
    """房间销毁通知"""
    room_trigger: Optional["RoomTriggerEvent"] = None
    """房间触发通知"""
    sequence_id: builtins.int
    """消息序列号"""


RoomMemberChangeEvent.update_forward_refs()
RoomDestroyEvent.update_forward_refs()
VipProto.update_forward_refs()
PendantProto.update_forward_refs()
MessageProto.update_forward_refs()
ProgressSyncEvent.update_forward_refs()
RoomUpdateEvent.update_forward_refs()
OfficialProto.update_forward_refs()
UserInfoProto.update_forward_refs()
RemoveChatEvent.update_forward_refs()
RoomTriggerEvent.update_forward_refs()
FreyaEventBody.update_forward_refs()
MessageEvent.update_forward_refs()
