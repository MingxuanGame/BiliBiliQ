"""
Generated by generator/gen_pydantic.py. DO NOT EDIT!
isort:skip_file
"""
import builtins
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
from enum import Enum
from datetime import datetime
import bilibiliq.internal.pb.bilibili.rpc.status_pb2_model


class Action(str, Enum):
    """"""

    UNKNOWN = 'UNKNOWN'
    """"""
    UPDATE = 'UPDATE'
    """"""
    DELETE = 'DELETE'
    """"""


class AuthReq(BaseModel):
    """鉴权请求，通过authorization验证绑定用户mid"""

    guid: builtins.str
    """冷启动id，算法uuid，重新起启会变"""
    conn_id: builtins.str
    """连接id，算法uuid，重连会变"""
    last_msg_id: builtins.int
    """最后收到的消息id，用于过虑重连后获取未读的消息"""


class AuthResp(BaseModel):
    """鉴权返回"""


class BroadcastFrame(BaseModel):
    """target_path:
    "/" Service-Name "/" {method name} 参考 gRPC Request Path
    """

    options: Optional["FrameOption"] = None
    """请求消息信息"""
    target_path: builtins.str
    """业务target_path"""
    body: Any
    """业务pb内容"""


class FrameOption(BaseModel):
    """message_id:
      client: 本次连接唯一的消息id，可用于回执
      server: 唯一消息id，可用于上报或者回执
    sequence:
      client: 客户端应该每次请求时frame seq++，会返回对应的对称req/resp
      server: 服务端下行消息，只会返回默认值：0
    """

    message_id: builtins.int
    """消息id"""
    sequence: builtins.int
    """frame序号"""
    is_ack: builtins.bool
    """是否进行消息回执(发出MessageAckReq)
    downstream 上只有服务端设置为true，客户端响应
    upstream   上只有客户端设置为true，服务端响应
    响应帧禁止设置is_ack，协议上禁止循环
    通常只有业务帧才可能设置is_ack, 因为协议栈(例如心跳、鉴权)另有响应约定
    """
    status: bilibiliq.internal.pb.bilibili.rpc.status_pb2_model.Status
    """业务状态码"""
    ack_origin: builtins.str
    """业务ack来源, 仅downstream时候由服务端填写."""
    timestamp: builtins.int
    """"""


class HeartbeatReq(BaseModel):
    """心跳请求"""


class HeartbeatResp(BaseModel):
    """心跳返回"""


class MessageAckReq(BaseModel):
    """消息回执"""

    ack_id: builtins.int
    """消息id"""
    ack_origin: builtins.str
    """ack来源，由业务指定用于埋点跟踪"""
    target_path: builtins.str
    """消息对应的target_path，方便业务区分和监控统计"""


class TargetPath(BaseModel):
    """target_path"""

    target_paths: List[builtins.str]
    """需要订阅的target_paths"""


AuthResp.update_forward_refs()
AuthReq.update_forward_refs()
MessageAckReq.update_forward_refs()
BroadcastFrame.update_forward_refs()
FrameOption.update_forward_refs()
HeartbeatResp.update_forward_refs()
TargetPath.update_forward_refs()
HeartbeatReq.update_forward_refs()
