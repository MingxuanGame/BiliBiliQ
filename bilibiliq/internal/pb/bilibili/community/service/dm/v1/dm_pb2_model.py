"""
Generated by generator/gen_pydantic.py. DO NOT EDIT!
isort:skip_file
"""

import builtins
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
from enum import Enum
from datetime import datetime


class AvatarType(str, Enum):
    """"""

    AvatarTypeNone = 'AvatarTypeNone'
    """"""
    AvatarTypeNFT = 'AvatarTypeNFT'
    """"""


class BubbleType(str, Enum):
    """"""

    BubbleTypeNone = 'BubbleTypeNone'
    """"""
    BubbleTypeClickButton = 'BubbleTypeClickButton'
    """"""
    BubbleTypeDmSettingPanel = 'BubbleTypeDmSettingPanel'
    """"""


class CheckboxType(str, Enum):
    """"""

    CheckboxTypeNone = 'CheckboxTypeNone'
    """"""
    CheckboxTypeEncourage = 'CheckboxTypeEncourage'
    """"""
    CheckboxTypeColorDM = 'CheckboxTypeColorDM'
    """"""


class DMAttrBit(str, Enum):
    """弹幕属性位值"""

    DMAttrBitProtect = 'DMAttrBitProtect'
    """保护弹幕"""
    DMAttrBitFromLive = 'DMAttrBitFromLive'
    """直播弹幕"""
    DMAttrHighLike = 'DMAttrHighLike'
    """高赞弹幕"""


class ExposureType(str, Enum):
    """"""

    ExposureTypeNone = 'ExposureTypeNone'
    """"""
    ExposureTypeDMSend = 'ExposureTypeDMSend'
    """"""


class PostPanelBizType(str, Enum):
    """"""

    PostPanelBizTypeNone = 'PostPanelBizTypeNone'
    """"""
    PostPanelBizTypeEncourage = 'PostPanelBizTypeEncourage'
    """"""
    PostPanelBizTypeColorDM = 'PostPanelBizTypeColorDM'
    """"""
    PostPanelBizTypeNFTDM = 'PostPanelBizTypeNFTDM'
    """"""
    PostPanelBizTypeFragClose = 'PostPanelBizTypeFragClose'
    """"""
    PostPanelBizTypeRecommend = 'PostPanelBizTypeRecommend'
    """"""


class PostStatus(str, Enum):
    """"""

    PostStatusNormal = 'PostStatusNormal'
    """"""
    PostStatusClosed = 'PostStatusClosed'
    """"""


class RenderType(str, Enum):
    """"""

    RenderTypeNone = 'RenderTypeNone'
    """"""
    RenderTypeSingle = 'RenderTypeSingle'
    """"""
    RenderTypeRotation = 'RenderTypeRotation'
    """"""


class SubtitleAiStatus(str, Enum):
    """"""

    Exposure = 'Exposure'
    """"""
    Assist = 'Assist'
    """"""


class SubtitleAiType(str, Enum):
    """"""

    Normal = 'Normal'
    """"""
    Translate = 'Translate'
    """"""


class SubtitleType(str, Enum):

    CC = 'CC'
    """CC字幕"""
    AI = 'AI'
    """AI生成字幕"""


class ToastFunctionType(str, Enum):
    """"""

    ToastFunctionTypeNone = 'ToastFunctionTypeNone'
    """"""
    ToastFunctionTypePostPanel = 'ToastFunctionTypePostPanel'
    """"""


class Avatar(BaseModel):
    """"""

    id: builtins.str
    """"""
    url: builtins.str
    """"""
    avatar_type: AvatarType
    """"""


class Bubble(BaseModel):
    """"""

    text: builtins.str
    """"""
    url: builtins.str
    """"""


class BubbleV2(BaseModel):
    """"""

    text: builtins.str
    """"""
    url: builtins.str
    """"""
    bubble_type: BubbleType
    """"""
    exposure_once: builtins.bool
    """"""
    exposure_type: ExposureType
    """"""


class Button(BaseModel):
    """"""

    text: builtins.str
    """"""
    action: builtins.int
    """"""


class BuzzwordConfig(BaseModel):
    """"""

    keywords: "List[BuzzwordShowConfig]"
    """"""


class BuzzwordShowConfig(BaseModel):
    """"""

    name: builtins.str
    """"""
    schema: builtins.str
    """"""
    source: builtins.int
    """"""
    id: builtins.int
    """"""
    buzzword_id: builtins.int
    """"""
    schema_type: builtins.int
    """"""


class CheckBox(BaseModel):
    """"""

    text: builtins.str
    """"""
    type: CheckboxType
    """"""
    default_value: builtins.bool
    """"""
    show: builtins.bool
    """"""


class CheckBoxV2(BaseModel):
    """"""

    text: builtins.str
    """"""
    type: builtins.int
    """"""
    default_value: builtins.bool
    """"""


class ClickButton(BaseModel):
    """"""

    portrait_text: List[builtins.str]
    """"""
    landscape_text: List[builtins.str]
    """"""
    portrait_text_focus: List[builtins.str]
    """"""
    landscape_text_focus: List[builtins.str]
    """"""
    render_type: RenderType
    """"""
    show: builtins.bool
    """"""
    bubble: Optional["Bubble"] = None
    """"""


class ClickButtonV2(BaseModel):
    """"""

    portrait_text: List[builtins.str]
    """"""
    landscape_text: List[builtins.str]
    """"""
    portrait_text_focus: List[builtins.str]
    """"""
    landscape_text_focus: List[builtins.str]
    """"""
    render_type: builtins.int
    """"""
    text_input_post: builtins.bool
    """"""
    exposure_once: builtins.bool
    """"""
    exposure_type: builtins.int
    """"""


class CommandDm(BaseModel):
    """互动弹幕条目信息"""

    id: builtins.int
    """弹幕id"""
    oid: builtins.int
    """对象视频cid"""
    mid: builtins.str
    """发送者mid"""
    command: builtins.str
    """互动弹幕指令"""
    content: builtins.str
    """互动弹幕正文"""
    progress: builtins.int
    """出现时间"""
    ctime: builtins.str
    """创建时间"""
    mtime: builtins.str
    """发布时间"""
    extra: builtins.str
    """扩展json数据"""
    idStr: builtins.str
    """弹幕id str类型"""


class DanmakuAIFlag(BaseModel):
    """弹幕ai云屏蔽列表"""

    dm_flags: "List[DanmakuFlag]"
    """弹幕ai云屏蔽条目"""


class DanmakuElem(BaseModel):
    """弹幕条目"""

    id: builtins.int
    """弹幕dmid"""
    progress: builtins.int
    """弹幕出现位置(单位ms)"""
    mode: builtins.int
    """弹幕类型 1 2 3:普通弹幕 4:底部弹幕 5:顶部弹幕 6:逆向弹幕 7:高级弹幕 8:代码弹幕 9:BAS弹幕(pool必须为2)"""
    fontsize: builtins.int
    """弹幕字号"""
    color: builtins.int
    """弹幕颜色"""
    midHash: builtins.str
    """发送着mid hash"""
    content: builtins.str
    """弹幕正文"""
    ctime: builtins.int
    """发送时间"""
    weight: builtins.int
    """权重 用于屏蔽等级 区间:[1,10]"""
    action: builtins.str
    """动作"""
    pool: builtins.int
    """弹幕池 0:普通池 1:字幕池 2:特殊池(代码/BAS弹幕)"""
    idStr: builtins.str
    """弹幕dmid str"""
    attr: builtins.int
    """弹幕属性位(bin求AND)
    bit0:保护 bit1:直播 bit2:高赞
    """
    animation: builtins.str
    """"""


class DanmakuFlag(BaseModel):
    """弹幕ai云屏蔽条目"""

    dmid: builtins.int
    """弹幕dmid"""
    flag: builtins.int
    """评分"""


class DanmakuFlagConfig(BaseModel):
    """云屏蔽配置信息"""

    rec_flag: builtins.int
    """云屏蔽等级"""
    rec_text: builtins.str
    """云屏蔽文案"""
    rec_switch: builtins.int
    """云屏蔽开关"""


class DanmuDefaultPlayerConfig(BaseModel):
    """弹幕默认配置"""

    player_danmaku_use_default_config: builtins.bool
    """是否使用推荐弹幕设置"""
    player_danmaku_ai_recommended_switch: builtins.bool
    """是否开启智能云屏蔽"""
    player_danmaku_ai_recommended_level: builtins.int
    """智能云屏蔽等级"""
    player_danmaku_blocktop: builtins.bool
    """是否屏蔽顶端弹幕"""
    player_danmaku_blockscroll: builtins.bool
    """是否屏蔽滚动弹幕"""
    player_danmaku_blockbottom: builtins.bool
    """是否屏蔽底端弹幕"""
    player_danmaku_blockcolorful: builtins.bool
    """是否屏蔽彩色弹幕"""
    player_danmaku_blockrepeat: builtins.bool
    """是否屏蔽重复弹幕"""
    player_danmaku_blockspecial: builtins.bool
    """是否屏蔽高级弹幕"""
    player_danmaku_opacity: builtins.float
    """弹幕不透明度"""
    player_danmaku_scalingfactor: builtins.float
    """弹幕缩放比例"""
    player_danmaku_domain: builtins.float
    """弹幕显示区域"""
    player_danmaku_speed: builtins.int
    """弹幕速度"""
    inline_player_danmaku_switch: builtins.bool
    """是否开启弹幕"""
    player_danmaku_senior_mode_switch: builtins.int
    """"""
    player_danmaku_ai_recommended_level_v2: builtins.int
    """"""
    player_danmaku_ai_recommended_level_v2_map: Dict[
        builtins.int, builtins.int
    ]
    """"""


class DanmuPlayerConfig(BaseModel):
    """弹幕配置"""

    player_danmaku_switch: builtins.bool
    """是否开启弹幕"""
    player_danmaku_switch_save: builtins.bool
    """是否记录弹幕开关设置"""
    player_danmaku_use_default_config: builtins.bool
    """是否使用推荐弹幕设置"""
    player_danmaku_ai_recommended_switch: builtins.bool
    """是否开启智能云屏蔽"""
    player_danmaku_ai_recommended_level: builtins.int
    """智能云屏蔽等级"""
    player_danmaku_blocktop: builtins.bool
    """是否屏蔽顶端弹幕"""
    player_danmaku_blockscroll: builtins.bool
    """是否屏蔽滚动弹幕"""
    player_danmaku_blockbottom: builtins.bool
    """是否屏蔽底端弹幕"""
    player_danmaku_blockcolorful: builtins.bool
    """是否屏蔽彩色弹幕"""
    player_danmaku_blockrepeat: builtins.bool
    """是否屏蔽重复弹幕"""
    player_danmaku_blockspecial: builtins.bool
    """是否屏蔽高级弹幕"""
    player_danmaku_opacity: builtins.float
    """弹幕不透明度"""
    player_danmaku_scalingfactor: builtins.float
    """弹幕缩放比例"""
    player_danmaku_domain: builtins.float
    """弹幕显示区域"""
    player_danmaku_speed: builtins.int
    """弹幕速度"""
    player_danmaku_enableblocklist: builtins.bool
    """是否开启屏蔽列表"""
    inline_player_danmaku_switch: builtins.bool
    """是否开启弹幕"""
    inline_player_danmaku_config: builtins.int
    """"""
    player_danmaku_ios_switch_save: builtins.int
    """"""
    player_danmaku_senior_mode_switch: builtins.int
    """"""
    player_danmaku_ai_recommended_level_v2: builtins.int
    """"""
    player_danmaku_ai_recommended_level_v2_map: Dict[
        builtins.int, builtins.int
    ]
    """"""


class DanmuPlayerConfigPanel(BaseModel):
    """"""

    selection_text: builtins.str
    """"""


class DanmuPlayerDynamicConfig(BaseModel):
    """弹幕显示区域自动配置"""

    progress: builtins.int
    """时间"""
    player_danmaku_domain: builtins.float
    """弹幕显示区域"""


class DanmuPlayerViewConfig(BaseModel):
    """弹幕配置信息"""

    danmuku_default_player_config: Optional["DanmuDefaultPlayerConfig"] = None
    """弹幕默认配置"""
    danmuku_player_config: Optional["DanmuPlayerConfig"] = None
    """弹幕用户配置"""
    danmuku_player_dynamic_config: "List[DanmuPlayerDynamicConfig]"
    """弹幕显示区域自动配置列表"""
    danmuku_player_config_panel: Optional["DanmuPlayerConfigPanel"] = None
    """"""


class DanmuWebPlayerConfig(BaseModel):
    """web端用户弹幕配置"""

    dm_switch: builtins.bool
    """是否开启弹幕"""
    ai_switch: builtins.bool
    """是否开启智能云屏蔽"""
    ai_level: builtins.int
    """智能云屏蔽等级"""
    blocktop: builtins.bool
    """是否屏蔽顶端弹幕"""
    blockscroll: builtins.bool
    """是否屏蔽滚动弹幕"""
    blockbottom: builtins.bool
    """是否屏蔽底端弹幕"""
    blockcolor: builtins.bool
    """是否屏蔽彩色弹幕"""
    blockspecial: builtins.bool
    """是否屏蔽重复弹幕"""
    preventshade: builtins.bool
    """"""
    dmask: builtins.bool
    """"""
    opacity: builtins.float
    """"""
    dmarea: builtins.int
    """"""
    speedplus: builtins.float
    """"""
    fontsize: builtins.float
    """弹幕字号"""
    screensync: builtins.bool
    """"""
    speedsync: builtins.bool
    """"""
    fontfamily: builtins.str
    """"""
    bold: builtins.bool
    """是否使用加粗"""
    fontborder: builtins.int
    """"""
    draw_type: builtins.str
    """弹幕渲染类型"""
    senior_mode_switch: builtins.int
    """"""
    ai_level_v2: builtins.int
    """"""
    ai_level_v2_map: Dict[builtins.int, builtins.int]
    """"""


class DmExpoReportReq(BaseModel):
    """"""

    session_id: builtins.str
    """"""
    oid: builtins.int
    """"""
    spmid: builtins.str
    """"""


class DmExpoReportRes(BaseModel):
    """"""


class DmPlayerConfigReq(BaseModel):
    """修改弹幕配置-请求"""

    ts: builtins.int
    """"""
    switch: Optional["PlayerDanmakuSwitch"] = None
    """是否开启弹幕"""
    switch_save: Optional["PlayerDanmakuSwitchSave"] = None
    """是否记录弹幕开关设置"""
    use_default_config: Optional["PlayerDanmakuUseDefaultConfig"] = None
    """是否使用推荐弹幕设置"""
    ai_recommended_switch: Optional["PlayerDanmakuAiRecommendedSwitch"] = None
    """是否开启智能云屏蔽"""
    ai_recommended_level: Optional["PlayerDanmakuAiRecommendedLevel"] = None
    """智能云屏蔽等级"""
    blocktop: Optional["PlayerDanmakuBlocktop"] = None
    """是否屏蔽顶端弹幕"""
    blockscroll: Optional["PlayerDanmakuBlockscroll"] = None
    """是否屏蔽滚动弹幕"""
    blockbottom: Optional["PlayerDanmakuBlockbottom"] = None
    """是否屏蔽底端弹幕"""
    blockcolorful: Optional["PlayerDanmakuBlockcolorful"] = None
    """是否屏蔽彩色弹幕"""
    blockrepeat: Optional["PlayerDanmakuBlockrepeat"] = None
    """是否屏蔽重复弹幕"""
    blockspecial: Optional["PlayerDanmakuBlockspecial"] = None
    """是否屏蔽高级弹幕"""
    opacity: Optional["PlayerDanmakuOpacity"] = None
    """弹幕不透明度"""
    scalingfactor: Optional["PlayerDanmakuScalingfactor"] = None
    """弹幕缩放比例"""
    domain: Optional["PlayerDanmakuDomain"] = None
    """弹幕显示区域"""
    speed: Optional["PlayerDanmakuSpeed"] = None
    """弹幕速度"""
    enableblocklist: Optional["PlayerDanmakuEnableblocklist"] = None
    """是否开启屏蔽列表"""
    inlinePlayerDanmakuSwitch: Optional["InlinePlayerDanmakuSwitch"] = None
    """是否开启弹幕"""
    senior_mode_switch: Optional["PlayerDanmakuSeniorModeSwitch"] = None
    """"""
    ai_recommended_level_v2: Optional["PlayerDanmakuAiRecommendedLevelV2"] = (
        None
    )
    """"""


class DmSegConfig(BaseModel):
    """"""

    page_size: builtins.int
    """"""
    total: builtins.int
    """"""


class DmSegMobileReply(BaseModel):
    """获取弹幕-响应"""

    elems: "List[DanmakuElem]"
    """弹幕列表"""
    state: builtins.int
    """是否已关闭弹幕
    0:未关闭 1:已关闭
    """
    ai_flag: Optional["DanmakuAIFlag"] = None
    """弹幕云屏蔽ai评分值"""


class DmSegMobileReq(BaseModel):
    """获取弹幕-请求"""

    pid: builtins.int
    """稿件avid/漫画epid"""
    oid: builtins.int
    """视频cid/漫画cid"""
    type: builtins.int
    """弹幕类型
    1:视频 2:漫画
    """
    segment_index: builtins.int
    """分段(6min)"""
    teenagers_mode: builtins.int
    """是否青少年模式"""
    ps: builtins.int
    """"""
    pe: builtins.int
    """"""
    pull_mode: builtins.int
    """"""
    from_scene: builtins.int
    """"""


class DmSegOttReply(BaseModel):
    """ott弹幕列表-响应"""

    closed: builtins.bool
    """是否已关闭弹幕
    0:未关闭 1:已关闭
    """
    elems: "List[DanmakuElem]"
    """弹幕列表"""


class DmSegOttReq(BaseModel):
    """ott弹幕列表-请求"""

    pid: builtins.int
    """稿件avid/漫画epid"""
    oid: builtins.int
    """视频cid/漫画cid"""
    type: builtins.int
    """弹幕类型
    1:视频 2:漫画
    """
    segment_index: builtins.int
    """分段(6min)"""


class DmSegSDKReply(BaseModel):
    """弹幕SDK-响应"""

    closed: builtins.bool
    """是否已关闭弹幕
    0:未关闭 1:已关闭
    """
    elems: "List[DanmakuElem]"
    """弹幕列表"""


class DmSegSDKReq(BaseModel):
    """弹幕SDK-请求"""

    pid: builtins.int
    """稿件avid/漫画epid"""
    oid: builtins.int
    """视频cid/漫画cid"""
    type: builtins.int
    """弹幕类型
    1:视频 2:漫画
    """
    segment_index: builtins.int
    """分段(6min)"""


class DmViewReply(BaseModel):
    """客户端弹幕元数据-响应"""

    closed: builtins.bool
    """是否已关闭弹幕
    0:未关闭 1:已关闭
    """
    mask: Optional["VideoMask"] = None
    """智能防挡弹幕蒙版信息"""
    subtitle: Optional["VideoSubtitle"] = None
    """视频字幕"""
    special_dms: List[builtins.str]
    """高级弹幕专包url(bfs)"""
    ai_flag: Optional["DanmakuFlagConfig"] = None
    """云屏蔽配置信息"""
    player_config: Optional["DanmuPlayerViewConfig"] = None
    """弹幕配置信息"""
    send_box_style: builtins.int
    """弹幕发送框样式"""
    allow: builtins.bool
    """是否允许"""
    check_box: builtins.str
    """check box 是否展示"""
    check_box_show_msg: builtins.str
    """check box 展示文本"""
    text_placeholder: builtins.str
    """展示文案"""
    input_placeholder: builtins.str
    """弹幕输入框文案"""
    report_filter_content: List[builtins.str]
    """用户举报弹幕 cid维度屏蔽的正则规则"""
    expo_report: Optional["ExpoReport"] = None
    """"""
    buzzword_config: Optional["BuzzwordConfig"] = None
    """"""
    expressions: "List[Expressions]"
    """"""
    post_panel: "List[PostPanel]"
    """"""
    activity_meta: List[builtins.str]
    """"""
    post_panel2: "List[PostPanelV2]"
    """"""


class DmViewReq(BaseModel):
    """客户端弹幕元数据-请求"""

    pid: builtins.int
    """稿件avid/漫画epid"""
    oid: builtins.int
    """视频cid/漫画cid"""
    type: builtins.int
    """弹幕类型
    1:视频 2:漫画
    """
    spmid: builtins.str
    """页面spm"""
    is_hard_boot: builtins.int
    """是否冷启"""


class DmWebViewReply(BaseModel):
    """web端弹幕元数据-响应
    https://api.bilibili.com/x/v2/dm/web/view
    """

    state: builtins.int
    """是否已关闭弹幕
    0:未关闭 1:已关闭
    """
    text: builtins.str
    """"""
    text_side: builtins.str
    """"""
    dm_sge: Optional["DmSegConfig"] = None
    """分段弹幕配置"""
    flag: Optional["DanmakuFlagConfig"] = None
    """云屏蔽配置信息"""
    special_dms: List[builtins.str]
    """高级弹幕专包url(bfs)"""
    check_box: builtins.bool
    """check box 是否展示"""
    count: builtins.int
    """弹幕数"""
    commandDms: "List[CommandDm]"
    """互动弹幕"""
    player_config: Optional["DanmuWebPlayerConfig"] = None
    """用户弹幕配置"""
    report_filter_content: List[builtins.str]
    """用户举报弹幕 cid维度屏蔽"""
    expressions: "List[Expressions]"
    """"""
    post_panel: "List[PostPanel]"
    """"""
    activity_meta: List[builtins.str]
    """"""


class ExpoReport(BaseModel):
    """"""

    should_report_at_end: builtins.bool
    """"""


class Expression(BaseModel):
    """"""

    keyword: List[builtins.str]
    """"""
    url: builtins.str
    """"""
    period: "List[Period]"
    """"""


class Expressions(BaseModel):
    """"""

    data: "List[Expression]"
    """"""


class InlinePlayerDanmakuSwitch(BaseModel):
    """是否开启弹幕"""

    value: builtins.bool
    """"""


class Label(BaseModel):
    """"""

    title: builtins.str
    """"""
    content: List[builtins.str]
    """"""


class LabelV2(BaseModel):
    """"""

    title: builtins.str
    """"""
    content: List[builtins.str]
    """"""
    exposure_once: builtins.bool
    """"""
    exposure_type: builtins.int
    """"""


class Period(BaseModel):
    """"""

    start: builtins.int
    """"""
    end: builtins.int
    """"""


class PlayerDanmakuAiRecommendedLevel(BaseModel):
    value: builtins.bool


class PlayerDanmakuAiRecommendedLevelV2(BaseModel):
    value: builtins.int


class PlayerDanmakuAiRecommendedSwitch(BaseModel):
    value: builtins.bool


class PlayerDanmakuBlockbottom(BaseModel):
    value: builtins.bool


class PlayerDanmakuBlockcolorful(BaseModel):
    value: builtins.bool


class PlayerDanmakuBlockrepeat(BaseModel):
    value: builtins.bool


class PlayerDanmakuBlockscroll(BaseModel):
    value: builtins.bool


class PlayerDanmakuBlockspecial(BaseModel):
    value: builtins.bool


class PlayerDanmakuBlocktop(BaseModel):
    value: builtins.bool


class PlayerDanmakuDomain(BaseModel):
    value: builtins.float


class PlayerDanmakuEnableblocklist(BaseModel):
    value: builtins.bool


class PlayerDanmakuOpacity(BaseModel):
    value: builtins.float


class PlayerDanmakuScalingfactor(BaseModel):
    value: builtins.float


class PlayerDanmakuSeniorModeSwitch(BaseModel):
    value: builtins.int


class PlayerDanmakuSpeed(BaseModel):
    value: builtins.int


class PlayerDanmakuSwitch(BaseModel):
    value: builtins.bool
    can_ignore: builtins.bool


class PlayerDanmakuSwitchSave(BaseModel):
    value: builtins.bool


class PlayerDanmakuUseDefaultConfig(BaseModel):
    value: builtins.bool


class PostPanel(BaseModel):
    """"""

    start: builtins.int
    """"""
    end: builtins.int
    """"""
    priority: builtins.int
    """"""
    biz_id: builtins.int
    """"""
    biz_type: PostPanelBizType
    """"""
    click_button: Optional["ClickButton"] = None
    """"""
    text_input: Optional["TextInput"] = None
    """"""
    check_box: Optional["CheckBox"] = None
    """"""
    toast: Optional["Toast"] = None
    """"""


class PostPanelV2(BaseModel):
    """"""

    start: builtins.int
    """"""
    end: builtins.int
    """"""
    biz_type: builtins.int
    """"""
    click_button: Optional["ClickButtonV2"] = None
    """"""
    text_input: Optional["TextInputV2"] = None
    """"""
    check_box: Optional["CheckBoxV2"] = None
    """"""
    toast: Optional["ToastV2"] = None
    """"""
    bubble: Optional["BubbleV2"] = None
    """"""
    label: Optional["LabelV2"] = None
    """"""
    post_status: builtins.int
    """"""


class Response(BaseModel):
    """修改弹幕配置-响应"""

    code: builtins.int
    """"""
    message: builtins.str
    """"""


class SubtitleItem(BaseModel):
    """单个字幕信息"""

    id: builtins.int
    """字幕id"""
    id_str: builtins.str
    """字幕id str"""
    lan: builtins.str
    """字幕语言代码"""
    lan_doc: builtins.str
    """字幕语言"""
    subtitle_url: builtins.str
    """字幕文件url"""
    author: Optional["UserInfo"] = None
    """字幕作者信息"""
    type: SubtitleType
    """字幕类型"""
    lan_doc_brief: builtins.str
    """"""
    ai_type: SubtitleAiType
    """"""
    ai_status: SubtitleAiStatus
    """"""


class TextInput(BaseModel):
    """"""

    portrait_placeholder: List[builtins.str]
    """"""
    landscape_placeholder: List[builtins.str]
    """"""
    render_type: RenderType
    """"""
    placeholder_post: builtins.bool
    """"""
    show: builtins.bool
    """"""
    avatar: "List[Avatar]"
    """"""
    post_status: PostStatus
    """"""
    label: Optional["Label"] = None
    """"""


class TextInputV2(BaseModel):
    """"""

    portrait_placeholder: List[builtins.str]
    """"""
    landscape_placeholder: List[builtins.str]
    """"""
    render_type: RenderType
    """"""
    placeholder_post: builtins.bool
    """"""
    avatar: "List[Avatar]"
    """"""
    text_input_limit: builtins.int
    """"""


class Toast(BaseModel):
    """"""

    text: builtins.str
    """"""
    duration: builtins.int
    """"""
    show: builtins.bool
    """"""
    button: Optional["Button"] = None
    """"""


class ToastButtonV2(BaseModel):
    """"""

    text: builtins.str
    """"""
    action: builtins.int
    """"""


class ToastV2(BaseModel):
    """"""

    text: builtins.str
    """"""
    duration: builtins.int
    """"""
    toast_button_v2: Optional["ToastButtonV2"] = None
    """"""


class UserInfo(BaseModel):
    """字幕作者信息"""

    mid: builtins.int
    """用户mid"""
    name: builtins.str
    """用户昵称"""
    sex: builtins.str
    """用户性别"""
    face: builtins.str
    """用户头像url"""
    sign: builtins.str
    """用户签名"""
    rank: builtins.int
    """用户等级"""


class VideoMask(BaseModel):
    """智能防挡弹幕蒙版信息"""

    cid: builtins.int
    """视频cid"""
    plat: builtins.int
    """平台
    0:web端 1:客户端
    """
    fps: builtins.int
    """帧率"""
    time: builtins.int
    """间隔时间"""
    mask_url: builtins.str
    """蒙版url"""


class VideoSubtitle(BaseModel):
    """视频字幕信息"""

    lan: builtins.str
    """视频原语言代码"""
    lanDoc: builtins.str
    """视频原语言"""
    subtitles: "List[SubtitleItem]"
    """视频字幕列表"""


BuzzwordShowConfig.update_forward_refs()
Expression.update_forward_refs()
Response.update_forward_refs()
InlinePlayerDanmakuSwitch.update_forward_refs()
PlayerDanmakuBlockbottom.update_forward_refs()
DanmuDefaultPlayerConfig.update_forward_refs()
CommandDm.update_forward_refs()
PlayerDanmakuUseDefaultConfig.update_forward_refs()
DmSegSDKReq.update_forward_refs()
VideoSubtitle.update_forward_refs()
Toast.update_forward_refs()
SubtitleItem.update_forward_refs()
PlayerDanmakuSpeed.update_forward_refs()
DmWebViewReply.update_forward_refs()
ToastV2.update_forward_refs()
ToastButtonV2.update_forward_refs()
PlayerDanmakuBlocktop.update_forward_refs()
PlayerDanmakuAiRecommendedSwitch.update_forward_refs()
PlayerDanmakuSeniorModeSwitch.update_forward_refs()
PlayerDanmakuBlockrepeat.update_forward_refs()
Expressions.update_forward_refs()
DanmuPlayerConfigPanel.update_forward_refs()
Period.update_forward_refs()
DmSegConfig.update_forward_refs()
DmExpoReportReq.update_forward_refs()
DanmakuElem.update_forward_refs()
DanmuPlayerConfig.update_forward_refs()
PlayerDanmakuSwitch.update_forward_refs()
PlayerDanmakuDomain.update_forward_refs()
DmSegMobileReq.update_forward_refs()
PlayerDanmakuAiRecommendedLevel.update_forward_refs()
DmSegOttReply.update_forward_refs()
TextInputV2.update_forward_refs()
PlayerDanmakuEnableblocklist.update_forward_refs()
DmViewReply.update_forward_refs()
PlayerDanmakuBlockcolorful.update_forward_refs()
DanmakuFlag.update_forward_refs()
CheckBoxV2.update_forward_refs()
DmViewReq.update_forward_refs()
DmSegOttReq.update_forward_refs()
PlayerDanmakuAiRecommendedLevelV2.update_forward_refs()
PlayerDanmakuBlockscroll.update_forward_refs()
CheckBox.update_forward_refs()
Button.update_forward_refs()
DanmakuAIFlag.update_forward_refs()
DmSegMobileReply.update_forward_refs()
DmSegSDKReply.update_forward_refs()
LabelV2.update_forward_refs()
PlayerDanmakuScalingfactor.update_forward_refs()
TextInput.update_forward_refs()
PlayerDanmakuSwitchSave.update_forward_refs()
UserInfo.update_forward_refs()
ClickButton.update_forward_refs()
DanmuPlayerViewConfig.update_forward_refs()
Avatar.update_forward_refs()
DanmakuFlagConfig.update_forward_refs()
DmPlayerConfigReq.update_forward_refs()
BuzzwordConfig.update_forward_refs()
PlayerDanmakuBlockspecial.update_forward_refs()
BubbleV2.update_forward_refs()
VideoMask.update_forward_refs()
Bubble.update_forward_refs()
ExpoReport.update_forward_refs()
PostPanelV2.update_forward_refs()
Label.update_forward_refs()
PostPanel.update_forward_refs()
DmExpoReportRes.update_forward_refs()
ClickButtonV2.update_forward_refs()
PlayerDanmakuOpacity.update_forward_refs()
DanmuWebPlayerConfig.update_forward_refs()
DanmuPlayerDynamicConfig.update_forward_refs()
