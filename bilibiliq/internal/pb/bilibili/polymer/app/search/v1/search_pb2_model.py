"""
Generated by generator/gen_pydantic.py. DO NOT EDIT!
isort:skip_file
"""

import builtins
from typing import List, Dict, Any, Optional
from pydantic import BaseModel
from enum import Enum
from datetime import datetime
import bilibiliq.internal.pb.bilibili.pagination.pagination_pb2_model
import bilibiliq.internal.pb.bilibili.app.archive.middleware.v1.preload_pb2_model


class CategorySort(str, Enum):
    """"""

    CATEGORY_SORT_DEFAULT = 'CATEGORY_SORT_DEFAULT'
    """"""
    CATEGORY_SORT_PUBLISH_TIME = 'CATEGORY_SORT_PUBLISH_TIME'
    """"""
    CATEGORY_SORT_CLICK_COUNT = 'CATEGORY_SORT_CLICK_COUNT'
    """"""
    CATEGORY_SORT_COMMENT_COUNT = 'CATEGORY_SORT_COMMENT_COUNT'
    """"""
    CATEGORY_SORT_LIKE_COUNT = 'CATEGORY_SORT_LIKE_COUNT'
    """"""


class Sort(str, Enum):
    """"""

    SORT_DEFAULT = 'SORT_DEFAULT'
    """"""
    SORT_VIEW_COUNT = 'SORT_VIEW_COUNT'
    """"""
    SORT_PUBLISH_TIME = 'SORT_PUBLISH_TIME'
    """"""
    SORT_DANMAKU_COUNT = 'SORT_DANMAKU_COUNT'
    """"""


class UserSort(str, Enum):
    """"""

    USER_SORT_DEFAULT = 'USER_SORT_DEFAULT'
    """"""
    USER_SORT_FANS_DESCEND = 'USER_SORT_FANS_DESCEND'
    """"""
    USER_SORT_FANS_ASCEND = 'USER_SORT_FANS_ASCEND'
    """"""
    USER_SORT_LEVEL_DESCEND = 'USER_SORT_LEVEL_DESCEND'
    """"""
    USER_SORT_LEVEL_ASCEND = 'USER_SORT_LEVEL_ASCEND'
    """"""


class UserType(str, Enum):
    """"""

    ALL = 'ALL'
    """"""
    UP = 'UP'
    """"""
    NORMAL_USER = 'NORMAL_USER'
    """"""
    AUTHENTICATED_USER = 'AUTHENTICATED_USER'
    """"""


class Args(BaseModel):
    """"""

    online: builtins.int
    """"""
    rname: builtins.str
    """"""
    room_id: builtins.int
    """"""
    tname: builtins.str
    """"""
    up_id: builtins.int
    """"""
    up_name: builtins.str
    """"""
    rid: builtins.int
    """"""
    tid: builtins.int
    """"""
    aid: builtins.int
    """"""


class Avatar(BaseModel):
    """"""

    cover: builtins.str
    """"""
    event: builtins.str
    """"""
    event_v2: builtins.str
    """"""
    text: builtins.str
    """"""
    up_id: builtins.int
    """"""
    uri: builtins.str
    """"""
    face_nft_new: builtins.int
    """"""
    nft_face_icon: Optional["NftFaceIcon"] = None
    """"""


class AvItem(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    uri: builtins.str
    """"""
    ctime_label: builtins.str
    """"""
    duration: builtins.str
    """"""
    play: builtins.int
    """"""
    danmaku: builtins.int
    """"""
    ctime: builtins.int
    """"""
    goto: builtins.str
    """"""
    param: builtins.str
    """"""
    position: builtins.int
    """"""
    ctime_label_v2: builtins.str
    """"""


class Background(BaseModel):
    """"""

    show: builtins.int
    """"""
    bg_pic_url: builtins.str
    """"""
    fg_pic_url: builtins.str
    """"""


class Badge(BaseModel):
    """"""

    text: builtins.str
    """"""
    bg_cover: builtins.str
    """"""


class Badge2(BaseModel):
    """"""

    bg_cover: builtins.str
    """"""
    text: builtins.str
    """"""


class BottomButton(BaseModel):
    """"""

    desc: builtins.str
    """"""
    link: builtins.str
    """"""


class BrandADAccount(BaseModel):
    """"""

    param: builtins.str
    """"""
    goto: builtins.str
    """"""
    mid: builtins.int
    """"""
    name: builtins.str
    """"""
    face: builtins.str
    """"""
    sign: builtins.str
    """"""
    relation: Optional["Relation"] = None
    """"""
    roomid: builtins.int
    """"""
    live_status: builtins.int
    """"""
    live_link: builtins.str
    """"""
    official_verify: Optional["OfficialVerify"] = None
    """"""
    vip: Optional["VipInfo"] = None
    """"""
    uri: builtins.str
    """"""
    face_nft_new: builtins.int
    """"""


class BrandADArc(BaseModel):
    """"""

    param: builtins.str
    """"""
    goto: builtins.str
    """"""
    aid: builtins.int
    """"""
    play: builtins.int
    """"""
    reply: builtins.int
    """"""
    duration: builtins.str
    """"""
    author: builtins.str
    """"""
    title: builtins.str
    """"""
    uri: builtins.str
    """"""
    cover: builtins.str
    """"""


class Button(BaseModel):
    """"""

    text: builtins.str
    """"""
    param: builtins.str
    """"""
    uri: builtins.str
    """"""
    event: builtins.str
    """"""
    selected: builtins.int
    """"""
    type: builtins.int
    """"""
    event_v2: builtins.str
    """"""
    relation: Optional["Relation"] = None
    """"""


class ButtonMeta(BaseModel):
    """"""

    icon: builtins.str
    """"""
    text: builtins.str
    """"""
    button_status: builtins.str
    """"""
    toast: builtins.str
    """"""


class CardBusinessBadge(BaseModel):
    """"""

    goto_icon: Optional["GotoIcon"] = None
    """"""
    badge_style: Optional["ReasonStyle"] = None
    """"""


class ChannelLabel(BaseModel):
    """"""

    text: builtins.str
    """"""
    uri: builtins.str
    """"""


class ChannelMixedItem(BaseModel):
    """"""

    id: builtins.int
    """"""
    cover_left_icon1: builtins.int
    """"""
    cover_left_text1: builtins.str
    """"""
    cover: builtins.str
    """"""
    goto: builtins.str
    """"""
    param: builtins.str
    """"""
    uri: builtins.str
    """"""
    title: builtins.str
    """"""
    badge: Optional["Badge2"] = None
    """"""


class CheckMore(BaseModel):
    """"""

    content: builtins.str
    """"""
    uri: builtins.str
    """"""


class CloudGameParams(BaseModel):
    """"""

    source_from: builtins.int
    """"""
    scene: builtins.str
    """"""


class DetailsRelationItem(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    cover_left_text: builtins.str
    """"""
    cover_badge_style: Optional["ReasonStyle"] = None
    """"""
    module_pos: builtins.str
    """"""
    goto: builtins.str
    """"""
    param: builtins.str
    """"""
    uri: builtins.str
    """"""
    position: builtins.int
    """"""
    cover_left_text_v2: builtins.str
    """"""
    cover_badge_style_v2: Optional["ReasonStyle"] = None
    """"""


class DislikeReason(BaseModel):
    """"""

    id: builtins.int
    """"""
    name: builtins.str
    """"""


class DisplayOption(BaseModel):
    """"""

    video_title_row: builtins.int
    """"""
    search_page_visual_opti: builtins.int
    """"""


class DyTopic(BaseModel):
    """"""

    title: builtins.str
    """"""
    uri: builtins.str
    """"""


class EasterEgg(BaseModel):
    """"""

    id: builtins.int
    """"""
    show_count: builtins.int
    """"""
    type: builtins.int
    """"""
    url: builtins.str
    """"""
    close_count: builtins.int
    """"""
    mask_transparency: builtins.int
    """"""
    mask_color: builtins.str
    """"""
    pic_type: builtins.int
    """"""
    show_time: builtins.int
    """"""
    source_url: builtins.str
    """"""
    source_md5: builtins.str
    """"""
    source_size: builtins.int
    """"""


class Episode(BaseModel):
    """"""

    uri: builtins.str
    """"""
    param: builtins.str
    """"""
    index: builtins.str
    """"""
    badges: "List[ReasonStyle]"
    """"""
    position: builtins.int
    """"""


class EpisodeNew(BaseModel):
    """"""

    title: builtins.str
    """"""
    uri: builtins.str
    """"""
    param: builtins.str
    """"""
    is_new: builtins.int
    """"""
    badges: "List[ReasonStyle]"
    """"""
    type: builtins.int
    """"""
    position: builtins.int
    """"""
    cover: builtins.str
    """"""
    label: builtins.str
    """"""


class ExtraLink(BaseModel):
    """"""

    text: builtins.str
    """"""
    uri: builtins.str
    """"""


class FollowButton(BaseModel):
    """"""

    icon: builtins.str
    """"""
    texts: Dict[builtins.str, builtins.str]
    """"""
    status_report: builtins.str
    """"""


class FullTextResult(BaseModel):
    """"""

    type: builtins.int
    """"""
    show_text: builtins.str
    """"""
    jump_start_progress: builtins.int
    """"""
    jump_uri: builtins.str
    """"""


class GotoIcon(BaseModel):
    """"""

    icon_url: builtins.str
    """"""
    icon_night_url: builtins.str
    """"""
    icon_width: builtins.int
    """"""
    icon_height: builtins.int
    """"""


class InlineProgressBar(BaseModel):
    """"""

    icon_drag: builtins.str
    """"""
    icon_drag_hash: builtins.str
    """"""
    icon_stop: builtins.str
    """"""
    icon_stop_hash: builtins.str
    """"""


class InlineThreePointPanel(BaseModel):
    """"""

    panel_type: builtins.int
    """"""
    share_id: builtins.str
    """"""
    share_origin: builtins.str
    """"""
    functional_buttons: "List[ShareButtonItem]"
    """"""


class Item(BaseModel):
    uri: builtins.str
    """"""
    param: builtins.str
    """"""
    goto: builtins.str
    """"""
    linktype: builtins.str
    """"""
    position: builtins.int
    """"""
    trackid: builtins.str
    """"""
    special: Optional["SearchSpecialCard"] = None
    """"""
    article: Optional["SearchArticleCard"] = None
    """"""
    banner: Optional["SearchBannerCard"] = None
    """"""
    live: Optional["SearchLiveCard"] = None
    """"""
    game: Optional["SearchGameCard"] = None
    """"""
    purchase: Optional["SearchPurchaseCard"] = None
    """"""
    recommend_word: Optional["SearchRecommendWordCard"] = None
    """"""
    dynamic: Optional["SearchDynamicCard"] = None
    """"""
    suggest_keyword: Optional["SearchNoResultSuggestWordCard"] = None
    """"""
    special_guide: Optional["SearchSpecialGuideCard"] = None
    """"""
    comic: Optional["SearchComicCard"] = None
    """"""
    channel_new: Optional["SearchNewChannelCard"] = None
    """"""
    ogv_card: Optional["SearchOgvCard"] = None
    """"""
    bangumi_relates: Optional["SearchOgvRelationCard"] = None
    """"""
    find_more: Optional["SearchOgvRecommendCard"] = None
    """"""
    esport: Optional["SearchSportCard"] = None
    """"""
    author_new: Optional["SearchAuthorNewCard"] = None
    """"""
    tips: Optional["SearchTipsCard"] = None
    """"""
    cm: Optional["SearchAdCard"] = None
    """"""
    pedia_card: Optional["SearchPediaCard"] = None
    """"""
    ugc_inline: Optional["SearchUgcInlineCard"] = None
    """"""
    live_inline: Optional["SearchLiveInlineCard"] = None
    """"""
    top_game: Optional["SearchTopGameCard"] = None
    """"""
    sports: Optional["SearchOlympicGameCard"] = None
    """"""
    pedia_card_inline: Optional["SearchOlympicWikiCard"] = None
    """"""
    recommend_tips: Optional["SearchRecommendTipCard"] = None
    """"""
    collection_card: Optional["SearchCollectionCard"] = None
    """"""
    ogv_channel: Optional["SearchOgvChannelCard"] = None
    """"""
    ogv_inline: Optional["SearchOgvInlineCard"] = None
    """"""
    author: Optional["SearchUpperCard"] = None
    """"""
    av: Optional["SearchVideoCard"] = None
    """"""
    bangumi: Optional["SearchBangumiCard"] = None
    """"""
    esports_inline: Optional["SearchSportInlineCard"] = None
    """"""


class LikeResource(BaseModel):
    """"""

    url: builtins.str
    """"""
    content_hash: builtins.str
    """"""


class LiveBadgeResource(BaseModel):
    """"""

    text: builtins.str
    """"""
    animation_url: builtins.str
    """"""
    animation_url_hash: builtins.str
    """"""
    background_color_light: builtins.str
    """"""
    background_color_night: builtins.str
    """"""
    alpha_light: builtins.int
    """"""
    alpha_night: builtins.int
    """"""
    font_color: builtins.str
    """"""


class Mask(BaseModel):
    """"""

    avatar: Optional["Avatar"] = None
    """"""
    button: Optional["Button"] = None
    """"""


class MatchInfoObj(BaseModel):
    """"""

    id: builtins.int
    """"""
    status: builtins.int
    """"""
    match_stage: builtins.str
    """"""
    team1: Optional["MatchTeam"] = None
    """"""
    team2: Optional["MatchTeam"] = None
    """"""
    match_label: Optional["MatchItem"] = None
    """"""
    match_time: Optional["MatchItem"] = None
    """"""
    match_button: Optional["MatchItem"] = None
    """"""


class MatchItem(BaseModel):
    """"""

    state: builtins.int
    """"""
    text: builtins.str
    """"""
    text_color: builtins.str
    """"""
    text_color_night: builtins.str
    """"""
    uri: builtins.str
    """"""
    live_link: builtins.str
    """"""
    texts: Optional["Texts"] = None
    """"""


class MatchTeam(BaseModel):
    """"""

    id: builtins.int
    """"""
    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    score: builtins.int
    """"""


class Nav(BaseModel):
    """"""

    name: builtins.str
    """"""
    total: builtins.int
    """"""
    pages: builtins.int
    """"""
    type: builtins.int
    """"""


class Navigation(BaseModel):
    """"""

    id: builtins.int
    """"""
    children: "List[Navigation]"
    """"""
    inline_children: "List[Navigation]"
    """"""
    title: builtins.str
    """"""
    uri: builtins.str
    """"""
    button: Optional["NavigationButton"] = None
    """"""


class NavigationButton(BaseModel):
    """"""

    type: builtins.int
    """"""
    text: builtins.str
    """"""
    uri: builtins.str
    """"""


class NftFaceIcon(BaseModel):
    """"""

    region_type: builtins.int
    """"""
    icon: builtins.str
    """"""
    show_status: builtins.int
    """"""


class Notice(BaseModel):
    """"""

    mid: builtins.int
    """"""
    notice_id: builtins.int
    """"""
    content: builtins.str
    """"""
    url: builtins.str
    """"""
    notice_type: builtins.int
    """"""
    icon: builtins.str
    """"""
    icon_night: builtins.str
    """"""
    text_color: builtins.str
    """"""
    text_color_night: builtins.str
    """"""
    bg_color: builtins.str
    """"""
    bg_color_night: builtins.str
    """"""


class OfficialVerify(BaseModel):
    """"""

    type: builtins.int
    """"""
    desc: builtins.str
    """"""


class OgvCardUI(BaseModel):
    """"""

    background_image: builtins.str
    """"""
    gaussian_blur_value: builtins.str
    """"""
    module_color: builtins.str
    """"""


class OgvClipInfo(BaseModel):
    """"""

    play_start_time: builtins.int
    """"""
    play_end_time: builtins.int
    """"""


class OgvRecommendWord(BaseModel):
    """"""

    title: builtins.str
    """"""
    goto: builtins.str
    """"""
    param: builtins.str
    """"""
    uri: builtins.str
    """"""


class PediaCover(BaseModel):
    """"""

    cover_type: builtins.int
    """"""
    cover_sun_url: builtins.str
    """"""
    cover_night_url: builtins.str
    """"""
    cover_width: builtins.int
    """"""
    cover_height: builtins.int
    """"""


class PlayerArgs(BaseModel):
    """"""

    is_live: builtins.int
    """"""
    aid: builtins.int
    """"""
    cid: builtins.int
    """"""
    sub_type: builtins.int
    """"""
    room_id: builtins.int
    """"""
    ep_id: builtins.int
    """"""
    is_preview: builtins.int
    """"""
    type: builtins.str
    """"""
    duration: builtins.int
    """"""
    season_id: builtins.int
    """"""
    report_required_play_duration: builtins.int
    """"""
    report_required_time: builtins.int
    """"""
    manual_play: builtins.int
    """"""
    hide_play_button: builtins.bool
    """"""
    content_mode: builtins.int
    """"""
    report_history: builtins.int
    """"""


class PlayerWidget(BaseModel):
    """"""

    title: builtins.str
    """"""
    desc: builtins.str
    """"""


class RankInfo(BaseModel):
    """"""

    search_night_icon_url: builtins.str
    """"""
    search_day_icon_url: builtins.str
    """"""
    search_bkg_night_color: builtins.str
    """"""
    search_bkg_day_color: builtins.str
    """"""
    search_font_night_color: builtins.str
    """"""
    search_font_day_color: builtins.str
    """"""
    rank_content: builtins.str
    """"""
    rank_link: builtins.str
    """"""


class RcmdReason(BaseModel):
    """"""

    content: builtins.str
    """"""


class ReasonStyle(BaseModel):
    """"""

    text: builtins.str
    """"""
    text_color: builtins.str
    """"""
    text_color_night: builtins.str
    """"""
    bg_color: builtins.str
    """"""
    bg_color_night: builtins.str
    """"""
    border_color: builtins.str
    """"""
    border_color_night: builtins.str
    """"""
    bg_style: builtins.int
    """"""


class RecommendWord(BaseModel):
    """"""

    param: builtins.str
    """"""
    type: builtins.str
    """"""
    title: builtins.str
    """"""
    from_source: builtins.str
    """"""


class Relation(BaseModel):
    """"""

    status: builtins.int
    """"""


class RightTopLiveBadge(BaseModel):
    """"""

    live_status: builtins.int
    """"""
    in_live: Optional["LiveBadgeResource"] = None
    """"""
    live_stats_desc: builtins.str
    """"""


class SearchAdCard(BaseModel):
    """"""

    json_str: builtins.str
    """"""


class SearchAllRequest(BaseModel):
    """"""

    keyword: builtins.str
    """"""
    order: builtins.int
    """"""
    tid_list: builtins.str
    """"""
    duration_list: builtins.str
    """"""
    extra_word: builtins.str
    """"""
    from_source: builtins.str
    """"""
    is_org_query: builtins.int
    """"""
    local_time: builtins.int
    """"""
    ad_extra: builtins.str
    """"""
    pagination: (
        bilibiliq.internal.pb.bilibili.pagination.pagination_pb2_model.Pagination
    )
    """"""
    player_args: (
        bilibiliq.internal.pb.bilibili.app.archive.middleware.v1.preload_pb2_model.PlayerArgs
    )
    """"""


class SearchAllResponse(BaseModel):
    """"""

    keyword: builtins.str
    """"""
    trackid: builtins.str
    """"""
    nav: "List[Nav]"
    """"""
    item: "List[Item]"
    """"""
    easter_egg: Optional["EasterEgg"] = None
    """"""
    exp_str: builtins.str
    """"""
    extra_word_list: List[builtins.str]
    """"""
    org_extra_word: builtins.str
    """"""
    select_bar_type: builtins.int
    """"""
    new_search_exp_num: builtins.int
    """"""
    pagination: (
        bilibiliq.internal.pb.bilibili.pagination.pagination_pb2_model.PaginationReply
    )
    """"""
    app_display_option: Optional["DisplayOption"] = None
    """"""
    annotation: Dict[builtins.str, builtins.str]
    """"""


class SearchArticleCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    play: builtins.int
    """"""
    like: builtins.int
    """"""
    reply: builtins.int
    """"""
    image_urls: List[builtins.str]
    """"""
    author: builtins.str
    """"""
    template_id: builtins.int
    """"""
    id: builtins.int
    """"""
    mid: builtins.int
    """"""
    name: builtins.str
    """"""
    desc: builtins.str
    """"""
    view: builtins.int
    """"""


class SearchAuthorNewCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    live_face: builtins.int
    """"""
    live_uri: builtins.str
    """"""
    live_link: builtins.str
    """"""
    fans: builtins.int
    """"""
    level: builtins.int
    """"""
    sign: builtins.str
    """"""
    is_up: builtins.bool
    """"""
    archives: builtins.int
    """"""
    mid: builtins.int
    """"""
    roomid: builtins.int
    """"""
    relation: Optional["Relation"] = None
    """"""
    official_verify: Optional["OfficialVerify"] = None
    """"""
    face_nft_new: builtins.int
    """"""
    nft_face_icon: Optional["NftFaceIcon"] = None
    """"""
    is_senior_member: builtins.int
    """"""
    background: Optional["Background"] = None
    """"""
    av_style: builtins.int
    """"""
    space: Optional["Space"] = None
    """"""
    av_items: "List[AvItem]"
    """"""
    notice: Optional["Notice"] = None
    """"""
    share_plane: Optional["SharePlane"] = None
    """"""
    inline_type: builtins.str
    """"""
    inline_live: Optional["SearchInlineData"] = None
    """"""
    is_inline_live: builtins.int
    """"""
    three_point: "List[ThreePoint]"
    """"""
    live_status: builtins.int
    """"""
    vip: Optional["VipInfo"] = None
    """"""


class SearchBangumiCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    media_type: builtins.int
    """"""
    play_state: builtins.int
    """"""
    area: builtins.str
    """"""
    style: builtins.str
    """"""
    styles: builtins.str
    """"""
    cv: builtins.str
    """"""
    rating: builtins.float
    """"""
    vote: builtins.int
    """"""
    target: builtins.str
    """"""
    staff: builtins.str
    """"""
    prompt: builtins.str
    """"""
    ptime: builtins.int
    """"""
    season_type_name: builtins.str
    """"""
    episodes: "List[Episode]"
    """"""
    is_selection: builtins.int
    """"""
    is_atten: builtins.int
    """"""
    label: builtins.str
    """"""
    season_id: builtins.int
    """"""
    out_name: builtins.str
    """"""
    out_icon: builtins.str
    """"""
    out_url: builtins.str
    """"""
    badges: "List[ReasonStyle]"
    """"""
    is_out: builtins.int
    """"""
    episodes_new: "List[EpisodeNew]"
    """"""
    watch_button: Optional["WatchButton"] = None
    """"""
    selection_style: builtins.str
    """"""
    check_more: Optional["CheckMore"] = None
    """"""
    follow_button: Optional["FollowButton"] = None
    """"""
    style_label: Optional["ReasonStyle"] = None
    """"""
    badges_v2: "List[ReasonStyle]"
    """"""
    styles_v2: builtins.str
    """"""


class SearchBannerCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""


class SearchByTypeRequest(BaseModel):
    """"""

    type: builtins.int
    """"""
    keyword: builtins.str
    """"""
    category_sort: builtins.int
    """"""
    category_id: builtins.int
    """"""
    user_type: builtins.int
    """"""
    user_sort: builtins.int
    """"""
    pagination: (
        bilibiliq.internal.pb.bilibili.pagination.pagination_pb2_model.Pagination
    )
    """"""
    player_args: (
        bilibiliq.internal.pb.bilibili.app.archive.middleware.v1.preload_pb2_model.PlayerArgs
    )
    """"""


class SearchByTypeResponse(BaseModel):
    """"""

    trackid: builtins.str
    """"""
    pages: builtins.int
    """"""
    exp_str: builtins.str
    """"""
    keyword: builtins.str
    """"""
    result_is_recommend: builtins.int
    """"""
    items: "List[Item]"
    """"""
    pagination: (
        bilibiliq.internal.pb.bilibili.pagination.pagination_pb2_model.PaginationReply
    )
    """"""
    annotation: Dict[builtins.str, builtins.str]
    """"""


class SearchCollectionCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    author: builtins.str
    """"""
    av_items: "List[AvItem]"
    """"""
    bottom_button: Optional["BottomButton"] = None
    """"""
    collection_icon: builtins.str
    """"""
    show_card_desc1: builtins.str
    """"""
    show_card_desc2: builtins.str
    """"""


class SearchComicCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    name: builtins.str
    """"""
    style: builtins.str
    """"""
    comic_url: builtins.str
    """"""
    badge: builtins.str
    """"""


class SearchComicInfo(BaseModel):
    """"""

    uri: builtins.str
    """"""
    param: builtins.str
    """"""
    comic: Optional["SearchComicCard"] = None
    """"""


class SearchComicRequest(BaseModel):
    """"""

    id_list: builtins.str
    """"""


class SearchComicResponse(BaseModel):
    """"""

    items: "List[SearchComicInfo]"
    """"""


class SearchDynamicCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    cover_count: builtins.int
    """"""
    covers: List[builtins.str]
    """"""
    upper: Optional["Upper"] = None
    """"""
    stat: Optional["Stat"] = None
    """"""
    dy_topic: "List[DyTopic]"
    """"""


class SearchGameCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    reserve: builtins.str
    """"""
    rating: builtins.float
    """"""
    tags: builtins.str
    """"""
    notice_name: builtins.str
    """"""
    notice_content: builtins.str
    """"""
    gift_content: builtins.str
    """"""
    gift_url: builtins.str
    """"""
    reserve_status: builtins.int
    """"""
    rank_info: Optional["RankInfo"] = None
    """"""
    special_bg_color: builtins.str
    """"""
    cloud_game_params: Optional["CloudGameParams"] = None
    """"""
    show_cloud_game_entry: builtins.bool
    """"""


class SearchInlineData(BaseModel):
    """"""

    uri: builtins.str
    """"""
    title: builtins.str
    """"""
    player_args: Optional["PlayerArgs"] = None
    """"""
    can_play: builtins.int
    """"""
    args: Optional["Args"] = None
    """"""
    card_goto: builtins.str
    """"""
    card_type: builtins.str
    """"""
    cover: builtins.str
    """"""
    cover_left_icon1: builtins.int
    """"""
    cover_left_icon2: builtins.int
    """"""
    cover_left_text1: builtins.str
    """"""
    cover_left_text2: builtins.str
    """"""
    up_args: Optional["UpArgs"] = None
    """"""
    extra_uri: builtins.str
    """"""
    is_fav: builtins.bool
    """"""
    is_coin: builtins.bool
    """"""
    goto: builtins.str
    """"""
    share: Optional["Share"] = None
    """"""
    three_point: Optional["ThreePoint2"] = None
    """"""
    three_point_v2: "List[ThreePointV2]"
    """"""
    share_plane: Optional["SharePlane"] = None
    """"""
    three_point_meta: Optional["InlineThreePointPanel"] = None
    """"""
    avatar: Optional["Avatar"] = None
    """"""
    cover_right_text: builtins.str
    """"""
    desc: builtins.str
    """"""
    inline_progress_bar: Optional["InlineProgressBar"] = None
    """"""
    like_button: Optional["SearchLikeButtonItem"] = None
    """"""
    official_icon: builtins.int
    """"""
    official_icon_v2: builtins.int
    """"""
    param: builtins.str
    """"""
    traffic_config: Optional["TrafficConfig"] = None
    """"""
    is_atten: builtins.bool
    """"""
    goto_icon: Optional["GotoIcon"] = None
    """"""
    disable_danmaku: builtins.bool
    """"""
    hide_danmaku_switch: builtins.bool
    """"""
    badge_style: Optional["ReasonStyle"] = None
    """"""
    player_widget: Optional["PlayerWidget"] = None
    """"""
    cover_badge_style: Optional["ReasonStyle"] = None
    """"""
    right_top_live_badge: Optional["RightTopLiveBadge"] = None
    """"""


class SearchLikeButtonItem(BaseModel):
    """"""

    aid: builtins.int
    """"""
    count: builtins.int
    """"""
    selected: builtins.int
    """"""
    show_count: builtins.bool
    """"""
    like_resource: Optional["LikeResource"] = None
    """"""
    like_night_resource: Optional["LikeResource"] = None
    """"""
    dislike_resource: Optional["LikeResource"] = None
    """"""
    dislike_night_resource: Optional["LikeResource"] = None
    """"""


class SearchLiveCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    rcmd_reason: Optional["RcmdReason"] = None
    """"""
    name: builtins.str
    """"""
    online: builtins.int
    """"""
    badge: builtins.str
    """"""
    live_link: builtins.str
    """"""
    card_left_text: builtins.str
    """"""
    card_left_icon: builtins.int
    """"""
    show_card_desc2: builtins.str
    """"""
    right_top_live_badge: Optional["RightTopLiveBadge"] = None
    """"""


class SearchLiveInlineCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    mid: builtins.int
    """"""
    rcmd_reason_style: Optional["ReasonStyle"] = None
    """"""
    roomid: builtins.int
    """"""
    live_link: builtins.str
    """"""
    live_room_inline: Optional["SearchInlineData"] = None
    """"""
    inline_type: builtins.str
    """"""


class SearchNewChannelCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    id: builtins.int
    """"""
    type_icon: builtins.str
    """"""
    channel_label1: Optional["ChannelLabel"] = None
    """"""
    channel_label2: Optional["ChannelLabel"] = None
    """"""
    channel_button: Optional["ChannelLabel"] = None
    """"""
    design_type: builtins.str
    """"""
    items: "List[ChannelMixedItem]"
    """"""


class SearchNoResultSuggestWordCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    sug_key_word_type: builtins.int
    """"""


class SearchOgvCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    sub_title1: builtins.str
    """"""
    sub_title2: builtins.str
    """"""
    cover: builtins.str
    """"""
    bg_cover: builtins.str
    """"""
    special_bg_color: builtins.str
    """"""
    cover_uri: builtins.str
    """"""


class SearchOgvChannelCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    media_id: builtins.int
    """"""
    styles: builtins.str
    """"""
    area: builtins.str
    """"""
    staff: builtins.str
    """"""
    badge: builtins.str
    """"""
    watch_button: Optional["WatchButton"] = None
    """"""
    rating: builtins.float
    """"""
    desc: builtins.str
    """"""
    badges_v2: "List[ReasonStyle]"
    """"""
    styles_v2: builtins.str
    """"""


class SearchOgvInlineCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    author: builtins.str
    """"""
    danmaku: builtins.int
    """"""
    desc: builtins.str
    """"""
    face: builtins.str
    """"""
    inline_type: builtins.str
    """"""
    mid: builtins.int
    """"""
    play: builtins.int
    """"""
    ogv_inline: Optional["SearchInlineData"] = None
    """"""
    ogv_clip_info: Optional["OgvClipInfo"] = None
    """"""
    watch_button: Optional["WatchButton"] = None
    """"""
    score: builtins.str
    """"""
    ogv_inline_exp: builtins.int
    """"""
    badges_v2: "List[ReasonStyle]"
    """"""


class SearchOgvRecommendCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    items: "List[OgvRecommendWord]"
    """"""
    special_bg_color: builtins.str
    """"""


class SearchOgvRelationCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    special_bg_color: builtins.str
    """"""
    more_text: builtins.str
    """"""
    more_url: builtins.str
    """"""
    items: "List[DetailsRelationItem]"
    """"""
    is_new_style: builtins.int
    """"""
    ogv_card_ui: Optional["OgvCardUI"] = None
    """"""


class SearchOlympicGameCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    sports_match_item: Optional["SportsMatchItem"] = None
    """"""
    match_top: Optional["MatchItem"] = None
    """"""
    bg_cover: builtins.str
    """"""
    extra_link: "List[ExtraLink]"
    """"""
    inline_type: builtins.str
    """"""
    ugc_inline: Optional["SearchInlineData"] = None
    """"""
    live_room_inline: Optional["SearchInlineData"] = None
    """"""
    match_bottom: Optional["MatchItem"] = None
    """"""


class SearchOlympicWikiCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    card_business_badge: Optional["CardBusinessBadge"] = None
    """"""
    read_more: Optional["NavigationButton"] = None
    """"""
    inline_type: builtins.str
    """"""
    ugc_inline: Optional["SearchInlineData"] = None
    """"""
    live_room_inline: Optional["SearchInlineData"] = None
    """"""
    pedia_cover: Optional["PediaCover"] = None
    """"""
    navigation: "List[Navigation]"
    """"""


class SearchPediaCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    navigation: "List[Navigation]"
    """"""
    read_more: Optional["NavigationButton"] = None
    """"""
    navigation_module_count: builtins.int
    """"""
    pedia_cover: Optional["PediaCover"] = None
    """"""
    card_business_badge: Optional["CardBusinessBadge"] = None
    """"""


class SearchPurchaseCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    badge: builtins.str
    """"""
    venue: builtins.str
    """"""
    price: builtins.int
    """"""
    price_complete: builtins.str
    """"""
    price_type: builtins.int
    """"""
    required_number: builtins.int
    """"""
    city: builtins.str
    """"""
    show_time: builtins.str
    """"""
    id: builtins.int
    """"""
    shop_name: builtins.str
    """"""


class SearchRecommendTipCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""


class SearchRecommendWordCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    list: "List[RecommendWord]"
    """"""


class SearchSpecialCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    new_rec_tags: "List[ReasonStyle]"
    """"""
    card_business_badge: Optional["CardBusinessBadge"] = None
    """"""
    badge: builtins.str
    """"""
    desc: builtins.str
    """"""
    new_rec_tags_v2: "List[ReasonStyle]"
    """"""


class SearchSpecialGuideCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    phone: builtins.str
    """"""
    desc: builtins.str
    """"""


class SearchSportCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    bg_cover: builtins.str
    """"""
    match_top: Optional["MatchItem"] = None
    """"""
    match_bottom: Optional["MatchItem"] = None
    """"""
    extra_link: "List[ExtraLink]"
    """"""
    items: "List[MatchInfoObj]"
    """"""
    id: builtins.int
    """"""


class SearchSportInlineCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    bg_cover: builtins.str
    """"""
    match_top: Optional["MatchItem"] = None
    """"""
    match_bottom: Optional["MatchItem"] = None
    """"""
    extra_link: "List[ExtraLink]"
    """"""
    items: "List[MatchInfoObj]"
    """"""
    id: builtins.int
    """"""
    esports_inline: Optional["SearchInlineData"] = None
    """"""
    inline_type: builtins.str
    """"""


class SearchTipsCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    sub_title: builtins.str
    """"""
    cover_night: builtins.str
    """"""


class SearchTopGameCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    array: builtins.int
    """"""
    background_image: builtins.str
    """"""
    button_type: builtins.int
    """"""
    game_icon: builtins.str
    """"""
    game_base_id: builtins.int
    """"""
    game_status: builtins.int
    """"""
    inline_type: builtins.str
    """"""
    top_game_ui: Optional["TopGameUI"] = None
    """"""
    notice_content: builtins.str
    """"""
    notice_name: builtins.str
    """"""
    rating: builtins.float
    """"""
    score: builtins.str
    """"""
    tab_info: "List[TabInfo]"
    """"""
    tags: builtins.str
    """"""
    ugc_inline: Optional["SearchInlineData"] = None
    """"""
    video_cover_image: builtins.str
    """"""
    inline_live: Optional["SearchInlineData"] = None
    """"""


class SearchUgcInlineCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    author: builtins.str
    """"""
    danmaku: builtins.int
    """"""
    desc: builtins.str
    """"""
    inline_type: builtins.str
    """"""
    mid: builtins.int
    """"""
    play: builtins.int
    """"""
    ugc_inline: Optional["SearchInlineData"] = None
    """"""
    full_text: Optional["FullTextResult"] = None
    """"""


class SearchUpperCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    sign: builtins.str
    """"""
    fans: builtins.int
    """"""
    archives: builtins.int
    """"""
    live_status: builtins.int
    """"""
    roomid: builtins.int
    """"""
    official_verify: Optional["OfficialVerify"] = None
    """"""
    face_nft_new: builtins.int
    """"""
    nft_face_icon: Optional["NftFaceIcon"] = None
    """"""
    av_items: "List[AvItem]"
    """"""
    is_up: builtins.bool
    """"""
    attentions: builtins.int
    """"""
    level: builtins.int
    """"""
    is_senior_member: builtins.int
    """"""
    vip: Optional["VipInfo"] = None
    """"""
    relation: Optional["Relation"] = None
    """"""
    live_link: builtins.str
    """"""
    notice: Optional["Notice"] = None
    """"""


class SearchVideoCard(BaseModel):
    """"""

    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    rcmd_reason: Optional["RcmdReason"] = None
    """"""
    new_rec_tags: "List[ReasonStyle]"
    """"""
    three_point: "List[ThreePoint]"
    """"""
    share: Optional["Share"] = None
    """"""
    card_business_badge: Optional["CardBusinessBadge"] = None
    """"""
    play: builtins.int
    """"""
    danmaku: builtins.int
    """"""
    author: builtins.str
    """"""
    desc: builtins.str
    """"""
    duration: builtins.str
    """"""
    badges: "List[ReasonStyle]"
    """"""
    mid: builtins.int
    """"""
    show_card_desc1: builtins.str
    """"""
    show_card_desc2: builtins.str
    """"""
    full_text: Optional["FullTextResult"] = None
    """"""
    new_rec_tags_v2: "List[ReasonStyle]"
    """"""
    badges_v2: "List[ReasonStyle]"
    """"""


class Share(BaseModel):
    """"""

    type: builtins.str
    """"""
    video: Optional["Video"] = None
    """"""


class ShareButtonItem(BaseModel):
    """"""

    type: builtins.int
    """"""
    button_metas: "List[ButtonMeta]"
    """"""


class SharePlane(BaseModel):
    """"""

    title: builtins.str
    """"""
    share_subtitle: builtins.str
    """"""
    desc: builtins.str
    """"""
    cover: builtins.str
    """"""
    aid: builtins.int
    """"""
    bvid: builtins.str
    """"""
    share_to: Optional["ShareTo"] = None
    """"""
    author: builtins.str
    """"""
    author_id: builtins.int
    """"""
    short_link: builtins.str
    """"""
    play_number: builtins.str
    """"""
    room_id: builtins.int
    """"""
    ep_id: builtins.int
    """"""
    area_name: builtins.str
    """"""
    author_face: builtins.str
    """"""
    season_id: builtins.int
    """"""
    share_from: builtins.str
    """"""
    season_title: builtins.str
    """"""


class ShareTo(BaseModel):
    """"""

    dynamic: builtins.bool
    """"""
    im: builtins.bool
    """"""
    copy: builtins.bool
    """"""
    more: builtins.bool
    """"""
    wechat: builtins.bool
    """"""
    weibo: builtins.bool
    """"""
    wechat_monment: builtins.bool
    """"""
    qq: builtins.bool
    """"""
    qzone: builtins.bool
    """"""
    facebook: builtins.bool
    """"""
    line: builtins.bool
    """"""
    messenger: builtins.bool
    """"""
    whats_app: builtins.bool
    """"""
    twitter: builtins.bool
    """"""


class Space(BaseModel):
    """"""

    show: builtins.int
    """"""
    text_color: builtins.str
    """"""
    text_color_night: builtins.str
    """"""
    text: builtins.str
    """"""
    space_url: builtins.str
    """"""


class SportsMatchItem(BaseModel):
    """"""

    match_id: builtins.int
    """"""
    season_id: builtins.int
    """"""
    match_name: builtins.str
    """"""
    img: builtins.str
    """"""
    begin_time_desc: builtins.str
    """"""
    match_status_desc: builtins.str
    """"""
    sub_content: builtins.str
    """"""
    sub_extra_icon: builtins.str
    """"""


class Stat(BaseModel):
    """"""

    play: builtins.int
    """"""
    like: builtins.int
    """"""
    reply: builtins.int
    """"""


class TabInfo(BaseModel):
    """"""

    tab_name: builtins.str
    """"""
    tab_url: builtins.str
    """"""
    sort: builtins.int
    """"""


class TextButton(BaseModel):
    """"""

    text: builtins.str
    """"""
    uri: builtins.str
    """"""


class TextLabel(BaseModel):
    """"""

    text: builtins.str
    """"""
    uri: builtins.str
    """"""


class Texts(BaseModel):
    """"""

    booking_text: builtins.str
    """"""
    unbooking_text: builtins.str
    """"""


class ThreePoint(BaseModel):
    """"""

    type: builtins.str
    """"""
    icon: builtins.str
    """"""
    title: builtins.str
    """"""


class ThreePoint2(BaseModel):
    """"""

    dislike_reasons: "List[DislikeReason]"
    """"""
    feedbacks: "List[DislikeReason]"
    """"""
    watch_later: builtins.int
    """"""


class ThreePointV2(BaseModel):
    """"""

    title: builtins.str
    """"""
    subtitle: builtins.str
    """"""
    reasons: "List[DislikeReason]"
    """"""
    type: builtins.str
    """"""
    id: builtins.int
    """"""


class ThreePointV3(BaseModel):
    """"""

    title: builtins.str
    """"""
    selected_title: builtins.str
    """"""
    subtitle: builtins.str
    """"""
    reasons: "List[DislikeReason]"
    """"""
    type: builtins.str
    """"""
    id: builtins.int
    """"""
    selected: builtins.int
    """"""
    icon: builtins.str
    """"""
    selected_icon: builtins.str
    """"""
    url: builtins.str
    """"""
    default_id: builtins.int
    """"""


class ThreePointV4(BaseModel):
    """"""

    share_plane: Optional["SharePlane"] = None
    """"""
    watch_later: Optional["WatchLater"] = None
    """"""


class TopGameUI(BaseModel):
    """"""

    background_image: builtins.str
    """"""
    cover_default_color: builtins.str
    """"""
    gaussian_blur_value: builtins.str
    """"""
    mask_color_value: builtins.str
    """"""
    mask_opacity: builtins.str
    """"""
    module_color: builtins.str
    """"""


class TrafficConfig(BaseModel):
    """"""

    title: builtins.str
    """"""
    options: "List[TrafficConfigOption]"
    """"""
    default_option_id: builtins.int
    """"""


class TrafficConfigOption(BaseModel):
    """"""

    id: builtins.int
    """"""
    text: builtins.str
    """"""


class UpArgs(BaseModel):
    """"""

    up_id: builtins.int
    """"""
    up_name: builtins.str
    """"""
    up_face: builtins.str
    """"""
    selected: builtins.int
    """"""


class Upper(BaseModel):
    """"""

    mid: builtins.int
    """"""
    title: builtins.str
    """"""
    cover: builtins.str
    """"""
    ptime_text: builtins.str
    """"""


class Video(BaseModel):
    """"""

    bvid: builtins.str
    """"""
    cid: builtins.int
    """"""
    share_subtitle: builtins.str
    """"""
    is_hot_label: builtins.bool
    """"""
    page: builtins.int
    """"""
    page_count: builtins.int
    """"""
    short_link: builtins.str
    """"""


class VipInfo(BaseModel):
    """"""

    type: builtins.int
    """"""
    status: builtins.int
    """"""
    due_date: builtins.int
    """"""
    vip_pay_type: builtins.int
    """"""
    theme_type: builtins.int
    """"""
    label: Optional["VipLabel"] = None
    """"""
    avatar_subscript: builtins.int
    """"""
    nickname_color: builtins.str
    """"""
    role: builtins.int
    """"""
    avatar_subscript_url: builtins.str
    """"""
    tv_vip_status: builtins.int
    """"""
    tv_vip_pay_type: builtins.int
    """"""


class VipLabel(BaseModel):
    """"""

    path: builtins.str
    """"""
    text: builtins.str
    """"""
    label_theme: builtins.str
    """"""
    text_color: builtins.str
    """"""
    bg_style: builtins.int
    """"""
    bg_color: builtins.str
    """"""
    border_color: builtins.str
    """"""
    use_img_label: builtins.bool
    """"""
    img_label_uri_hans: builtins.str
    """"""
    img_label_uri_hant: builtins.str
    """"""
    img_label_uri_hans_static: builtins.str
    """"""
    img_label_uri_hant_static: builtins.str
    """"""


class WatchButton(BaseModel):
    """"""

    title: builtins.str
    """"""
    link: builtins.str
    """"""


class WatchedShow(BaseModel):
    """"""

    switch: builtins.bool
    """"""
    num: builtins.int
    """"""
    text_small: builtins.str
    """"""
    text_large: builtins.str
    """"""
    icon: builtins.str
    """"""
    icon_location: builtins.str
    """"""
    icon_web: builtins.str
    """"""


class WatchLater(BaseModel):
    """"""

    aid: builtins.int
    """"""
    bvid: builtins.str
    """"""


MatchTeam.update_forward_refs()
TrafficConfigOption.update_forward_refs()
EpisodeNew.update_forward_refs()
SearchOgvCard.update_forward_refs()
WatchButton.update_forward_refs()
Stat.update_forward_refs()
Badge2.update_forward_refs()
FollowButton.update_forward_refs()
TextButton.update_forward_refs()
SearchBannerCard.update_forward_refs()
Upper.update_forward_refs()
ThreePointV2.update_forward_refs()
SearchLiveInlineCard.update_forward_refs()
ButtonMeta.update_forward_refs()
SearchUpperCard.update_forward_refs()
SearchLikeButtonItem.update_forward_refs()
TextLabel.update_forward_refs()
Button.update_forward_refs()
ReasonStyle.update_forward_refs()
ThreePointV3.update_forward_refs()
BrandADAccount.update_forward_refs()
SearchSpecialGuideCard.update_forward_refs()
Item.update_forward_refs()
LikeResource.update_forward_refs()
NavigationButton.update_forward_refs()
MatchItem.update_forward_refs()
SearchAuthorNewCard.update_forward_refs()
Relation.update_forward_refs()
SearchOgvRelationCard.update_forward_refs()
SearchRecommendWordCard.update_forward_refs()
SearchNoResultSuggestWordCard.update_forward_refs()
SearchOgvChannelCard.update_forward_refs()
SearchAllResponse.update_forward_refs()
SearchRecommendTipCard.update_forward_refs()
TopGameUI.update_forward_refs()
FullTextResult.update_forward_refs()
BrandADArc.update_forward_refs()
SearchComicResponse.update_forward_refs()
VipLabel.update_forward_refs()
OgvCardUI.update_forward_refs()
AvItem.update_forward_refs()
SearchCollectionCard.update_forward_refs()
TrafficConfig.update_forward_refs()
SearchOlympicWikiCard.update_forward_refs()
SportsMatchItem.update_forward_refs()
MatchInfoObj.update_forward_refs()
ChannelMixedItem.update_forward_refs()
CheckMore.update_forward_refs()
GotoIcon.update_forward_refs()
VipInfo.update_forward_refs()
Video.update_forward_refs()
InlineProgressBar.update_forward_refs()
ShareButtonItem.update_forward_refs()
SharePlane.update_forward_refs()
EasterEgg.update_forward_refs()
PediaCover.update_forward_refs()
SearchSportCard.update_forward_refs()
TabInfo.update_forward_refs()
ThreePointV4.update_forward_refs()
SearchTopGameCard.update_forward_refs()
SearchSpecialCard.update_forward_refs()
ChannelLabel.update_forward_refs()
SearchLiveCard.update_forward_refs()
Nav.update_forward_refs()
SearchByTypeResponse.update_forward_refs()
UpArgs.update_forward_refs()
OfficialVerify.update_forward_refs()
DyTopic.update_forward_refs()
SearchOlympicGameCard.update_forward_refs()
Notice.update_forward_refs()
Share.update_forward_refs()
Mask.update_forward_refs()
SearchSportInlineCard.update_forward_refs()
SearchOgvRecommendCard.update_forward_refs()
RankInfo.update_forward_refs()
Navigation.update_forward_refs()
DisplayOption.update_forward_refs()
SearchComicRequest.update_forward_refs()
WatchLater.update_forward_refs()
CardBusinessBadge.update_forward_refs()
SearchPurchaseCard.update_forward_refs()
SearchDynamicCard.update_forward_refs()
SearchPediaCard.update_forward_refs()
PlayerArgs.update_forward_refs()
SearchBangumiCard.update_forward_refs()
Badge.update_forward_refs()
SearchComicInfo.update_forward_refs()
OgvClipInfo.update_forward_refs()
SearchOgvInlineCard.update_forward_refs()
LiveBadgeResource.update_forward_refs()
Episode.update_forward_refs()
OgvRecommendWord.update_forward_refs()
RightTopLiveBadge.update_forward_refs()
PlayerWidget.update_forward_refs()
WatchedShow.update_forward_refs()
ShareTo.update_forward_refs()
DislikeReason.update_forward_refs()
SearchNewChannelCard.update_forward_refs()
SearchByTypeRequest.update_forward_refs()
Args.update_forward_refs()
SearchVideoCard.update_forward_refs()
SearchGameCard.update_forward_refs()
ExtraLink.update_forward_refs()
SearchAllRequest.update_forward_refs()
ThreePoint2.update_forward_refs()
ThreePoint.update_forward_refs()
SearchTipsCard.update_forward_refs()
SearchAdCard.update_forward_refs()
BottomButton.update_forward_refs()
Texts.update_forward_refs()
SearchArticleCard.update_forward_refs()
SearchUgcInlineCard.update_forward_refs()
RecommendWord.update_forward_refs()
NftFaceIcon.update_forward_refs()
SearchComicCard.update_forward_refs()
Avatar.update_forward_refs()
SearchInlineData.update_forward_refs()
InlineThreePointPanel.update_forward_refs()
DetailsRelationItem.update_forward_refs()
Background.update_forward_refs()
Space.update_forward_refs()
RcmdReason.update_forward_refs()
CloudGameParams.update_forward_refs()
